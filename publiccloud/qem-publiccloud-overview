#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Fetch jobs and get an overview of the currently running publiccloud jobs

import sys
import argparse
import datetime
import requests
import json


FLAVORS = [
  "EC2-BYOS-Updates",
  "EC2-BYOS-ARM-Updates",
  "AZURE-BYOS-Updates",
  "GCE-BYOS-Updates",
  "EC2-Updates",
  "EC2-ARM-Updates",
  "AZURE-Basic-Updates",
  "AZURE-Standard-Updates",
  "GCE-Updates"
]
LINKS=["https://openqa.suse.de/api/v1/jobs/overview?flavor=" + x for x in FLAVORS]



#### Program section ###########################################################

# Declare ANSI color codes
ANSI_RED = "\u001b[31m"
ANSI_GREEN = "\u001b[32m"
ANSI_YELLOW = "\u001b[33m"
ANSI_BLUE = "\u001b[34m"
ANSI_MAGENTA = "\u001b[35m"
ANSI_CYAN = "\u001b[36m"
ANSI_WHITE = "\u001b[37m"
ANSI_RESET = "     \u001b[0m"

def get_publiccloud_jobs() :
	ids = []
	for link in LINKS :
		r = requests.get(link)
		if r.status_code != 200:
			raise ValueError("http status code %d" % r.status_code)
		# return job ids
		for x in r.json() :
			ids.append(x["id"])
	return ids



def get_job(jobid) :
	r = requests.get("https://openqa.suse.de/api/v1/jobs/%d" % (jobid))
	if r.status_code != 200:
		raise ValueError("http status code %d" % r.status_code)
	return r.json()


def parse_build_date(datestr) :
	if '-' in datestr : datestr = datestr[:datestr.find('-')]
	try :
		return datetime.datetime.strptime(datestr, '%Y%m%d')
	except ValueError :
		return None
def parse_tfinished_date(datestr) :
	try :
		return datetime.datetime.strptime(datestr, '%Y-%m-%dT%H:%M:%S')
	except ValueError :
		return None
def istoday(date) :
	now = datetime.datetime.now()
	return now.year == date.year and now.month == date.month and now.day == date.day

def get_state_colorcode(_s) :
	if _s == "scheduled" or _s == "assigned" : return ANSI_BLUE
	elif _s == "done" or _s == "passed" : return ANSI_GREEN
	elif _s == "softfail" : return ANSI_YELLOW
	elif _s == "fail" or _s == "failed" : return ANSI_RED
	elif _s == "cancelled" or _s == "user_cancelled" : return ANSI_MAGENTA
	return ANSI_WHITE

def print_job(job, fmt="default", depth=0) :
	_id, _name, _s = job['id'], job['name'], job['state']
	_test = job['test']
	if _s == "done" : _s = job["result"]
	if "settings" in job :
		settings = job['settings']
		_build = settings['BUILD']
		_test = settings['FLAVOR'] + "/" + _test
	else :
		_build = ""
	_url = "https://openqa.suse.de/tests/%d" % (_id)
	
	if fmt == "uri" :
		print("  %8d  %10s | %s" % (_id, _s, _name))
	else : # default
		scheduledate = None
		buildstr = _build
		scheduledate = parse_build_date(_build)
		# Prefer t_finished over build
		if 't_finished' in job :
			t_finished = job['t_finished']
			if t_finished is not None and t_finished != "" :
				scheduledate = parse_tfinished_date(t_finished)
		if not scheduledate is None :
			buildstr = (ANSI_GREEN if istoday(scheduledate) else ANSI_RED) + scheduledate.strftime('%Y-%m-%d') + ANSI_RESET
		
		_test = "  " * depth + _test       # Child jobs's test name is shifted for visualization
		
		print("  %s %8d %s%-10s%s %50s | %s" % (buildstr, _id, get_state_colorcode(_s), _s, ANSI_RESET, _test, _url))
		# Print children, if the test is done or softfailed
		if _s in ["done", "softfail"] and 'children' in job :
			children = [get_job(i) for i in job['children']['Chained']]
			for c in children : 
				print_job(c['job'], fmt, depth+1)

if __name__ == "__main__" :
	fmt = "default"
	parser = argparse.ArgumentParser()
	parser.add_argument("-v", "--verbose", help="Verbose mode", action="store_true", default=False)
	parser.add_argument("-i", "--ids", dest="ids", action="store_true", default=False)
	args = parser.parse_args()
	ids_only = args.ids
	verbose = args.verbose
	
	if verbose : print("Get publiccloud job ids ... ")
	ids = get_publiccloud_jobs()
	if ids_only :
		print(" ".join([str(i) for i in ids]))
		sys.exit(0)
	if verbose : print("Fetching job infos ... ")
	jobs = [get_job(i) for i in ids]
	if verbose : print("%d jobs fetched." % (len(jobs)))
	# Let's order the jobs by their groups
	groups = {}
	for j in jobs : 
		if not 'job' in j : continue
		j = j['job']
		group = j['group']
		if not group in groups : groups[group] = []
		groups[group].append(j)
	
	# Print jobs ordered by their groups
	group_names = list(groups.keys())
	group_names.sort()
	for n in reversed(group_names) :
		print(" ==== %s ============================== " % n)
		for j in groups[n] :
			print_job(j, fmt)
